# SPDX-License-Identifier: BSD 3-Clause Revised
#
# author: Gregor A. Segner
---

# ensure correct os family is set
- ansible.builtin.set_facts: ansible_os_family = "SuSe"
  when: (ansible_os_family | search("SUSE LINUX")) or (ansible_os_family | search("openSUSE Leap"))

# ensure we detect WSL-machines
- block:
  - ansible.builtin.stat:
      path: "/proc/sys/fs/binfmt_misc/WSLInterop"
    register: wsldetect

  - ansible.builtin.set_facts:
      wslmachine: True
    when: wsldetect.stat.exists

  - ansible.builtin.set_facts:
      wslmachine: False
    when: not wsldetect.stat.exists

# ensure additional bash functions are available on *nix systems
- name: ensure additional bash functions are present
  block:
  - ansible.builtin.file:
      path: '/usr/local/lib/bash'
      state: directory
      owner: root
      group: root
      mode: '0755'

  - ansible.builtin.get_url:
      url: 'https://raw.githubusercontent.com/g4s/collecction/master/nix/lib/{{ item }}'
      dest: '/usr/local/lib/bash/{{ item }}'
      owner: root
      group: root
      mode: '0755'
    loop:
    - 'system.sh'
  when: ansible_os_family != 'Windows'

- name: ensure hostname is set
  block:
  - ansible.builtin.hostname: "{{ hostname | default('machine001') }}"
    when: ( ansible_os_family != 'Windows' ) and ( ansible_os_family != "Darwin" )

  # windows requires reboot for setting a hostname
  - ansible.windows.win_hostname:
      name: "{{ hostname | default('machine001') }}"
    when: ( ansible_os_family == 'Windows')
    notify:
    - reboot machine
  become: true
  tags:
  - machine_setup

- name: ensure system has latest pci-IDs
  ansible.builtin.command: 'update-pciids'
  when: ( ansible_os_family != 'Windows' ) and ( ansible_os_family != 'Darwin' )
  tags:
  - machine_setup

# loading os family specific tasks
- ansible.builtin.include_tasks:
    file: './tasks/{{ ansible_os_family }}/main.yml'

- ansible.builtin.include_role:
    name: de.seafi.tailscale
  tags:
  - vpn

- ansible.builtin.include_tasks:
    file: "./tasks/ntp.yml"

# initiate new user home on first login
- ansible.builtin.template:
    src: "profile.d/00-initiate-user.sh"
    dest: "/etc/profile.d/initiate-user.sh"
    owner: root
    group: root
    mode: 755
  when: ansible_os_family != "Windows"

- name: ensure user get there own tmp-dir
  ansible.builtin.template:
    src: "profile.d/01-createtemp.sh"
    dest: "/etc/profile.d/01-createtemp.sh"
    group: root
    owner: root
    mode: 755
  when: ansible_os_family != "Windows"

- name: ensure goodnight-script is present on host
  block:
  - ansible.builtin.set_facts:
      goodnight_time: 22:00:00

  - ansible.builtin.copy:
      src: "goodnight.py"
      dest: "/usr/bin/goodnight"
      mode: 750
      owner: root
      group: root

  - ansible.builtin.template:
      src: "systemd/goodninght.service.j2"
      dest: "/etc/systemd/system/goodnight.service"
      mode: 750
      owner: root
      group: root

  - ansible.builtin.template:
      src: "systemd/goodnight.timer.j2"
      dest: "/etc/systemd/system/goodnight.service"
      mode: 750
      owner: root
      group: root
  tags:
  - goodnight
